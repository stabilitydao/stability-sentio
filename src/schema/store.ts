
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'

export enum UnderlyingType {
  NATIVE = "NATIVE", VIRTUAL_SINGLE = "VIRTUAL_SINGLE", VIRTUAL_EACH_ASSET = "VIRTUAL_EACH_ASSET"
}
export enum UnitType {
  Core = "Core", Lending = "Lending"
}




@Entity("Pool")
export class Pool extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Int")
	chain_id: Int

	@Required
	@Column("Int")
	timestamp: Int

	@Required
	@Column("Int")
	creation_block_number: Int

	@Required
	@Column("String")
	underlying_token_address: String

	@Required
	@Column("Int")
	underlying_token_index: Int

	@Required
	@Column("String")
	underlying_token_symbol: String

	@Required
	@Column("Int")
	underlying_token_decimals: Int

	@Required
	@Column("String")
	receipt_token_address: String

	@Required
	@Column("String")
	receipt_token_symbol: String

	@Required
	@Column("Int")
	receipt_token_decimals: Int

	@Required
	@Column("String")
	pool_address: String

	@Required
	@Column("String")
	pool_symbol: String

	@Required
	@Column("String")
	underlying_type: UnderlyingType

	@Required
	@Column("String")
	strategy: String

	@Required
	@Column("BigDecimal")
	earned: BigDecimal

	@Required
	@Column("BigDecimal")
	earnedSnapshot: BigDecimal
  constructor(data: Partial<Pool>) {super()}
}

@Entity("Strategy")
export class Strategy extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	vault: String
  constructor(data: Partial<Strategy>) {super()}
}

@Entity("VaultUser")
export class VaultUser extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	account: String

	@Required
	@Column("String")
	vault: String

	@Required
	@Column("Int")
	underlying_token_index: Int

	@Required
	@Column("BigDecimal")
	underlying_token_amount: BigDecimal

	@Required
	@Column("BigDecimal")
	underlying_token_amount_usd: BigDecimal

	@Required
	@Column("BigDecimal")
	earned: BigDecimal

	@Required
	@Column("BigDecimal")
	earnedSnapshot: BigDecimal
  constructor(data: Partial<VaultUser>) {super()}
}

@Entity("Revenue")
export class Revenue extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("BigDecimal")
	valueUsd: BigDecimal

	@Required
	@Column("BigDecimal")
	price: BigDecimal

	@Required
	@Column("BigDecimal")
	value: BigDecimal
  constructor(data: Partial<Revenue>) {super()}
}

@Entity("RevenueUnit")
export class RevenueUnit extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	unit: String

	@Required
	@Column("BigDecimal")
	valueUsd: BigDecimal

	@Required
	@Column("BigDecimal")
	price: BigDecimal

	@Required
	@Column("BigDecimal")
	value: BigDecimal
  constructor(data: Partial<RevenueUnit>) {super()}
}


const source = `enum UnderlyingType {
    # real underlying that strategy use (LP token, ALM token, asset)
    NATIVE
    # single asset of strategy we use as underlying here
    VIRTUAL_SINGLE
    # the first of final strategy assets we use as underlying here
    VIRTUAL_EACH_ASSET
}

enum UnitType {
    Core
    Lending
}


# Output column headers must match the following : chain_id, timestamp, creation_block_number, underlying_token_address, underlying_token_index, underlying_token_symbol, underlying_token_decimals, receipt_token_address, receipt_token_symbol, receipt_token_decimals, pool_address, pool_symbol

type Pool @entity {
    "{vault_address}-{underlying_token_index}"
    id: ID!

    # Schema fields
    chain_id: Int!
    timestamp: Int!
    creation_block_number: Int!
    underlying_token_address: String!
    underlying_token_index: Int!
    underlying_token_symbol: String!
    underlying_token_decimals: Int!
    receipt_token_address: String!
    receipt_token_symbol: String!
    receipt_token_decimals: Int!
    pool_address: String!
    pool_symbol: String!

    # helper fields
    underlying_type: UnderlyingType!
    strategy: String!
    earned: BigDecimal!
    earnedSnapshot: BigDecimal!
}

type Strategy @entity {
    id: ID!

    vault: String!
}

type VaultUser @entity {
    "{user_address}-{vault_address}-{underlying_index}"
    id: ID!
    "{user_address}"
    account: String!
    "{vault_address}"
    vault: String!
    "{underlying_index}"
    underlying_token_index: Int!

    underlying_token_amount: BigDecimal!
    underlying_token_amount_usd: BigDecimal!
    earned: BigDecimal!
    earnedSnapshot: BigDecimal!
}

type Revenue @entity {
    "{epoch_week}"
    id: ID!

    valueUsd: BigDecimal!
    price: BigDecimal!
    value: BigDecimal!
}

type RevenueUnit @entity {
    "{epoch_week}-}"
    id: ID!

    unit: String!
    valueUsd: BigDecimal!
    price: BigDecimal!
    value: BigDecimal!
}`
DatabaseSchema.register({
  source,
  entities: {
    "Pool": Pool,
		"Strategy": Strategy,
		"VaultUser": VaultUser,
		"Revenue": Revenue,
		"RevenueUnit": RevenueUnit
  }
})
